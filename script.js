
// Theme & SW & mobile menu & active link omitted for brevity
(function(){
  const btn = document.querySelector('.theme-toggle');
  const root = document.documentElement;
  function apply(t){ if(t==='light'){root.setAttribute('data-theme','light'); if(btn)btn.textContent='ðŸŒž';} else {root.removeAttribute('data-theme'); if(btn)btn.textContent='ðŸŒ™';} }
  apply(localStorage.getItem('cbm-theme'));
  if(btn) btn.addEventListener('click', ()=>{ const next = root.getAttribute('data-theme') === 'light' ? null : 'light'; if(next) localStorage.setItem('cbm-theme','light'); else localStorage.removeItem('cbm-theme'); apply(localStorage.getItem('cbm-theme')); });
})();
if('serviceWorker' in navigator){ navigator.serviceWorker.register('/sw.js').catch(e=>console.warn('SW failed',e)); }
(function(){ const hamburger=document.querySelector('.hamburger'); const mobileMenu=document.getElementById('mobileMenu'); const closeBtn=mobileMenu && mobileMenu.querySelector('.close-btn'); if(hamburger&&mobileMenu){ hamburger.addEventListener('click', ()=>{ mobileMenu.hidden=false; mobileMenu.classList.add('active'); document.body.classList.add('no-scroll'); hamburger.setAttribute('aria-expanded','true'); }); closeBtn.addEventListener('click', ()=>{ mobileMenu.classList.remove('active'); setTimeout(()=>mobileMenu.hidden=true,300); document.body.classList.remove('no-scroll'); hamburger.setAttribute('aria-expanded','false'); }); } })();
(function(){ const anchors = document.querySelectorAll('.desktop-nav a, .mobile-nav a'); const path = window.location.pathname.split('/').pop() || 'index.html'; anchors.forEach(a=>{ if((a.getAttribute('href')||'').split('/').pop() === path) a.classList.add('active'); }); })();
(function(){ const MONERO_ADDR = "84h4Y7rWNF7gd134i5m9vHH4iwU95FS3i9hZZ8rVPbA1NX5gY4HLESfTXyV8GeXHVSNXNLEQce8L7jnVi6XCq2UrFfF6nSp"; const products = document.querySelectorAll('.card.product'); if(!products.length) return; async function fetchXmrUsd(){ try{ const res = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=monero&vs_currencies=usd'); const j = await res.json(); return j.monero.usd; }catch(e){console.warn('XMR price fetch failed',e); return null;} } async function fetchAudToUsd(){ try{ const r = await fetch('https://api.exchangerate.host/convert?from=AUD&to=USD&amount=1'); const j = await r.json(); return j.result || 0.65; }catch(e){console.warn('AUD->USD fetch failed',e); return 0.65;} } products.forEach(prod=>{ const buyBtn = prod.querySelector('.buy-btn'); const backBtn = prod.querySelector('.flip-back'); const xmrUsdEl = prod.querySelector('.xmr-usd'); const priceAudEl = prod.querySelector('.price-aud'); const priceUsdEl = prod.querySelector('.price-usd'); const priceXmrEl = prod.querySelector('.price-xmr'); const qrImg = prod.querySelector('.qr-img'); const priceAud = parseFloat(prod.getAttribute('data-price-aud')||'0'); buyBtn.addEventListener('click', async ()=>{ prod.classList.add('is-flipped'); const [xmrUsd, audToUsd] = await Promise.all([fetchXmrUsd(), fetchAudToUsd()]); if(xmrUsd) xmrUsdEl.textContent = xmrUsd.toFixed(2); priceAudEl.textContent = priceAud.toFixed(2) + ' AUD'; const usd = priceAud * (audToUsd || 0.65); priceUsdEl.textContent = usd.toFixed(2) + ' USD'; const xmrAmt = xmrUsd ? (usd / xmrUsd) : 0; priceXmrEl.textContent = xmrAmt.toFixed(6) + ' XMR'; const uri = 'monero:' + MONERO_ADDR + '?tx_amount=' + xmrAmt.toFixed(6); const qurl = 'https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=' + encodeURIComponent(uri); qrImg.src = qurl; qrImg.alt = 'Monero payment QR'; }); if(backBtn) backBtn.addEventListener('click', ()=>{ prod.classList.remove('is-flipped'); }); }); })();
